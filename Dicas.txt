lb4 model

lb4 datasource

lb4 repository

lb4 controller

  ? Controller class name: Product

  ? What kind of controller would you like to generate?
    Empty Controller
  > REST Controller with CRUD functions

  ? What is the name of the model to use with this CRUD repository? (Use arrow keys)
  > Product

  ? What is the name of your CRUD repository? (Use arrow keys)
  > ProductRepository

  ? What is the name of ID property? (id)

  ? Is the id omitted when creating a new instance? No

  ? What is the base HTTP path name of the CRUD operations? (/products)

Para executar:
  npm start
  npm run dev

Conectando com MySQL:
---------------------

1. Criar schema do banco;
2. Em migrate.ts, alterar await app.migrateSchema({existingSchema}); para
   incluir o model de Student
   await app.migrateSchema({existingSchema, models: ['Student']});
3. executar npm run build
4. executar npm run migrate

Obs.: quando da criação da tabela Address criar manualmente a FK e Índice:
  ALTER TABLE lb_demo_db.address
  ADD FOREIGN KEY (studentId) REFERENCES lb_demo_db.Student(id);

  ALTER TABLE lb_demo_db.address ADD UNIQUE INDEX addressIndex (studentId);

Para criar relação entre dois models (tabelas):
-----------------------------------------------

1. lb4 relation



Associações entre as tabelas utilizadas no Curso
================================================

# HasMany

A hasMany relation denotes a one-to-many connection of a model to another model through referential integrity.

## One to Many Relationship

_A student can take many courses_

**Source model: Course** <br>
**Target model: Student**

_Student model will have the primary key of Course model as foriegn key_

---

# belongsTo

A belongsTo relation denotes a many-to-one connection of a model to another model through referential integrity.

## One to Many Relationship

_Many students can belongs to one department_

**Source model: Student** <br>
**Target model: Department**

_Student model will have the primary key of Department model as foriegn key_

## hasOne

A hasOne relation denotes a one-to-one connection of a model to another model through referential integrity.

_A Student can only have one Address_

### Steps

1. Create HasOne Relation
2. Add BelongsTo Relation
3. Setup Database
4. Configure relation with Source Repository
5. Add Controller for one to one relation


# Authentication
----------------

**Authentication is a process of verifying someone’s identity before a protected resource is accessed.**

**Authorization is a process of deciding if a user can perform an action on a protected resource.**

LoopBack 4 has an authentication package @loopback/authentication which allows you to secure your application’s API endpoints with custom authentication strategies and an @authenticate decorator.

### TOKEN

`// {encrypted-header}.{encrypted-payload}.{encrypted-signature}` <br/>
`eyJhbXVCJ9.eyJpZCI6Ij.I3wpRNCH4;`

lb4 model
  - user

lb4 repository
lb4 controller    --- criar com a opção Empty

Configurar o @post do user.controller.ts
Incluir o User em migrate.ts
Executar:
  npm run build
  npm run migrate

Na tabela user no MySQL, criar o índice:
  ALTER TABLE lb_demo_db.user ADD UNIQUE INDEX userIndex (email);

Instalar: npm i email-validator --save

Importar em validator.ts: import * as EmailValidator from 'email-validator';

Exportar em user.repository:
  export type Credentials = {
    email: string;
    password: string;
  };

Para encriptografar a senha:

  npm install bcryptjs @types/bcryptjs --save

===============================================================================

Creating login route
--------------------

1. Criar folder: specs dentro do folder controllers
2. Criar arquivo: user.controller.spec.ts que será utilizado no
   @requestBody(CredentialsRequestBody) do async login em user.controller.ts

===============================================================================

Varify User Credentials while login
-----------------------------------

1. Criar arquivo services/user-service.ts
2. instalar: npm install @loopback/authentication --save

===============================================================================

Creating JSON Web TOKEN
-----------------------

1. Instalar: npm i jsonwebtoken --save
2. Criar o arquivo jwt-service.ts, onde será utilizado as funcionalidades
   de geração e validação do token
3. Configurado o application.ts com os bind
    this.bind('services.jwt.service').toClass(JWTService);
    this.bind('authentication.jwt.secret').to('123asdf5');
    this.bind('authentication.jwt.expiresIn').to('7h');
    * ver o arquivo keys.ts com as novas configurações
4. Criar o arquivo src/keys.ts

5. Para a validação do JWT, incluir em sequence.ts:
    @inject(AuthenticationBindings.AUTH_ACTION)
    protected authenticateRequest: AuthenticateFn,
6. Incluir a action do JWT em sequence.ts:
    //call authentication action
    await this.authenticateRequest(request);
7. E no catch, icnluir:
    if (
      error.code === AUTHENTICATION_STRATEGY_NOT_FOUND ||
      error.code === USER_PROFILE_NOT_FOUND
    ) {
      Object.assign(error, {statusCode: 401 /* Unauthorized */});
    }
    Obs.: tudo com as devidas importações.

8. Criar o folder: authentication-strategies
9. Criar o arquivo: authentication-strategies/jwt-strategy.ts onde será
   checada as estratégias de autenticação
10. Configurar application.ts
11. jwt-service.ts está a configuração do verifyToken e generateToken
===============================================================================

Criando Admin Role com as permissões
------------------------------------

1. Alterar user.models.ts e incluir:
    @property.array(String)
    permissions: String[];
2. executar para incluir as permissões:
    npm run build
    npm run migrate

3. Criar um novo controller vazio para o usuário Admin
    lb4 controller

4. Criar pasta: authorization
5. Criar arquivo: authorization/permission-keys.ts

5. Criado novo entry point: Job (nova entity comRest Controller)
    lb4 model
    lb4 repository
    lb4 controller
6. Incluir em migrate.ts
7. executar:
    npm run build
    npm run migrate

8. Criar os Interceptors
    lb4 interceptor

    obs.: o sistema irá criar os arquivos: authorize.interceptor.ts e index.ts

    Exemplo da execução:
    C:\Loopback\lb-prod>lb4 interceptor
    ? Interceptor name: authorize
    ? Is it a global interceptor? Yes

    Global interceptors are sorted by the order of an array of group names
    bound to ContextBindings.GLOBAL_INTERCEPTOR_ORDERED_GROUPS.
    See https://loopback.io/doc/en/lb4/Interceptors.html#order-of-invocation-for-interceptors.

    ? Group name for the global interceptor: ('')
      create src\interceptors\authorize.interceptor.ts
      update src\interceptors\index.ts

    Interceptor Authorize was created in src\interceptors/

    C:\Loopback\lb-prod>

9. Criar o arquivo src/types.ts
10. incluir as chamadas da autenticação no métodos desejados
    Exemplo: em job.controller.ts
    @authenticate('jwt', {required: [PermissionKeys.CreateJob]})
    async create(

11. Incluir as permissões em jwt-service.ts
    userProfile = Object.assign(
        { [securityId]: '', name: '', permissions: [] },
        :
        :
12. Instalar: npm install --save @types/lodash
13. Criar a interface MyUserProfile em types.ts
14. Instalar: npm install --save-dev @loopback/testlab
===============================================================================

Conectando LoopBack 4 com MongoDB
---------------------------------

1. lb4 datasource

  Exemplo da saída do processo de criação:

  C:\Loopback\lb-prod>lb4 datasource
  ? Datasource name: mongods
  ? Select the connector for mongods: MongoDB (supported by StrongLoop)
  ? Connection String url to override other settings
    (eg: mongodb://username:password@hostname:port/database):
  ? host: 127.0.0.1
  ? port: 27017
  ? user:
  ? password: [hidden]
  ? database: lb4-demo
  ? Feature supported by MongoDB v3.1.0 and above: Yes
    create src\datasources\mongods.datasource.config.json
    create src\datasources\mongods.datasource.ts
  npm WARN lb-prod@1.0.0 No license field.

  + loopback-connector-mongodb@4.2.0
  added 9 packages from 13 contributors and audited 5175 packages in 6.259s
  found 0 vulnerabilities

    update src\datasources\index.ts

  Datasource Mongods was created in src\datasources/

2. lb4 model
    - Company
    - entity
    - id number pk
    - name string required

3. lb4 repository
    - mongodsDatasource
    - Company

4. lb4 controller
    - Company
    - Rest Controller
    - /companies

5. Obs.: antes de rodar a apliacação, lembrar de inicializar o mongodb:
    - Executar mongod

export namespace Configuracao {
  export const ConfigMongoDbAtlas =
  {
    name: "mongods",
    connector: "mongodb",
    url: "mongodb+srv://usuario_admin:egito001@clusterapi-hto5v.mongodb.net/test?retryWrites=true&w=majority",
    host: "clusterapi-hto5v.mongodb.net/test",
    user: "usuario_admin",
    password: ".....",    a de sempre terminadada 001 com inicial minúscula e sem ponto
    database: "mongodb+srv",
    useNewUrlParser: true
  }
}


----------------------------------------------------------------------------------------------------------------------------------

COMANDOS MONGODB:

C:\mongo\bin> mongod --dbpath C:\mongo\data
c:\mongo\bin> mongo

show databases
use workshop
show collections

db.customers.insert({ nome: "Luiz", idade: 29 })
db.customers.find()

custArray = [{ nome : "Fernando", idade : 29 }, { nome : "Teste", "uf" : "RS" }]
db.customers.insert(custArray)
db.customers.find()

db.customers.find().pretty()
db.getCollection("customers").find({}).pretty();

db.customers.find({uf: "RS"})									--> listar documentos com uf = 'RS'

db.customers.find({nome: { $regex: /a/ }})						--> listar documentos que têm a letra 'a'

db.customers.find({idade: {$gte: 18}})							--> listar documentos com idade >= 18
db.customers.find({nome: "Luiz", idade: {$gte: 18}})
db.customers.find({nome: { $regex: /a/ }, idade: {$gte: 18}})

Outros operadores que você pode usar junto ao filtro do find são:
	$e: 	exatamente igual (=)
	$ne: 	diferente (<> ou !=)
	$gt: 	maior do que (>)
	$lt: 	menor do que (<)
	$lte: 	menor ou igual a (<=)
	$in: 	o valor está contido em um array de possibilidades, como em um OU. Ex: {idade: {$in: [10,12] }}
	$all: 	MongoDB permite campos com arrays. Ex: { tags: ["NodeJS", "MongoDB"] }. Com esse operador,
			você compara se seu campo multivalorado possui todos os valores de um array específico.
			Ex: {tags: {$all: ["NodeJS", "Android"]}}


Duarte, Luiz. Node.js e Microservices: Um Guia Prático . LuizTools. Edição do Kindle.

db.customers.find().skip(1).limit(10)							--> retorna 10 itens e ignora o primeiro

db.customers.find().sort({idade: 1})							--> ordena pela idade (1 = asc; -1 desc)

db.customers.updateOne({_id: ObjectId("59ab46e433959e2724be2cbd")}, {$set: {idade: 28}})
																--> pesquisa peli id e atualiza apenas a idade
																--> note que usei uma função ObjectId para converter,
																	pois esse valor não é uma string.
																--> pode-se usar null para limpar um campo

Outros operadores com update:
	$unset: 	remove o respectivo campo do documento;
	$inc: 		incrementa o valor original do campo com o valor especificado;
	$mul: 		multiplica o valor original do campo com o valor especificado;
	$rename: 	muda o nome do campo para o nome especificado;


db.customers.updateOne({nome: "LuizTools"}, {nome: "LuizTools", uf: "RS"}, {upsert: true})

--> Um upsert é um update como qualquer outro, ou seja, vai atualizar o documento que atender ao filtro passado
	como primeiro parâmetro, porém, se não existir nenhum documento com o respectivo filtro, ele será inserido,
	como se fosse um insert.

db.customers.delete({nome: "Luiz"})		--> exclcuir nome = "Luiz"

===============================================================================

## What is dependency Injection?

- Dependency injection is a technique whereby one object supplies the
  dependencies of another object. A "dependency" is an object that can be used,
  for example as a service.

- Before we can use methods of other classes, we first need to create the
  object of that class (i.e. class A needs to create an instance of class B).

- Dependency Injection is a set of software design principles and patterns
  that enables you to develop loosely coupled code.

```ts
class Person {
  serice: Service;
  constructor() {
    this.service = new Service();
  }
}
```

### Why do we need Dependency Injection?

- Inversion of Control
- Classes should configure its dependencies from the outside
- It allows you to reusing the classes
- Testing the classes independentaly from other classes

### LoopBack supports three kinds of dependency injection:

**constructor injection:** the dependencies are provided as arguments of the
  class constructor. <br>

```ts
class ProductController {
  constructor(@inject('repositories.Product') repo) {
    this.repo = repo;
  }

  async list() {
    return await this.repo.find({where: {available: true}});
  }
}
```

**property injection:** the dependencies are stored in instance properties
  after the class was constructed. <br>

```ts
class InfoController {
  @inject('logger', {optional: true})
  private logger = ConsoleLogger();

  status() {
    this.logger.info('Status endpoint accessed.');
    return {pid: process.pid};
  }
}
```

** method injection:** the dependencies are provided as arguments of a method
** invocation. Please note that constructor injection is a special form of
** method injection to instantiate a class by calling its constructor.

```ts
class InfoController {
  greet(@inject(AuthenticationBindings.CURRENT_USER) user: UserProfile) {
    return `Hello, ${user.name}`;
  }
}
```

```ts
const context = {
  config: [],
  'service.hasher': BcyrptHasher,
  round: 10,
};
```
